buildscript {
    repositories {
        maven {
            url nexusOpenUrl
            credentials {
                username nexusOpenUsername
                password nexusOpenPassword
            }
        }
    }

    dependencies {
        classpath group: 'org.talend.buildtools', name: 'talend-root', version: '0.1.0-SNAPSHOT'
    }
}

plugins {
    id "org.dm.bundle" version "0.8.4"
//    id "org.talend.buildtools.talend-root"
}


apply plugin: 'java'
apply plugin: 'project-report'
apply plugin: 'org.talend.buildtools.talend-root'

description = 'Daikon main shared library'

dependencies {
    compile group: 'org.apache.avro', name: 'avro', version: '1.8.0'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.12'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.5.3'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.5.3'
    compile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.6'
    compile group: 'com.cedarsoftware', name: 'json-io', version: '4.4.1-SNAPSHOT'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
    testCompile group: 'org.skyscreamer', name: 'jsonassert', version: '1.2.3'
}

jar {
    manifest {
        name "${project.getName()} Library"
        attributes 'Bundle-SymbolicName': 'org.talend.daikon.lib',
                'Export-Package': 'org.talend.daikon*'
    }
}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
}


bundle {
    trace = true
}

// Applies the bundle plugin to a Jar task
void applyPlugin(Task jarTask) {
    def jarBuilderFactory = new org.dm.gradle.plugins.bundle.JarBuilderFactoryDecorator(
            jarTask, project.bundle.jarBuilderFactory)

    jarTask.deleteAllActions()
    jarTask.doLast(new org.dm.gradle.plugins.bundle.BundleGenerator(jarBuilderFactory))
    jarTask.manifest = new org.dm.gradle.plugins.bundle.ManifestSubstitute(jarBuilderFactory, jarTask.manifest)
}

task listJars << {
    configurations.compile.getResolvedConfiguration().getFirstLevelModuleDependencies().each
            { ResolvedDependency dep ->
                dep.getModuleArtifacts().each
                        {
                            println dep.getModuleGroup() + ':' + dep.getModuleName() + ':' + dep.getModuleVersion() + ' ' + it.getFile().getName()
                        }
            }
}

task listArts << {
    configurations.compile.allArtifacts.each { println it.name }
}

// Embed-Dependency is not a gradle thing; use Include-Resource and update the classpath
// based on the dependent jar files (similar to the issue 2 stuff). -

task bundleJar(type: Jar) {
    from sourceSets.main.output
    classifier 'bundle'

    applyPlugin(bundleJar)

    manifest {
        attributes 'Bundle-Name': "${project.getName()} Bundle",
                'Bundle-SymbolicName': 'org.talend.daikon.lib',
                'Export-Package': 'org.talend.daikon.*',
                'Dynamic-ImportPackage': '*',
                'Service-Component': '*',
                'Embed-Transitive': 'true',
                'Embed-Dependency': '*;artifactId=paranamer|snappy-java|commons-compress|xz;inline=true'
    }
}

def addDependency(gavMap, ResolvedDependency dep) {
    dep.getModuleArtifacts().each {
        def gav = "${dep.getModuleGroup()}/${dep.getModuleName()}/${dep.getModuleVersion()}"
        gavMap.put(gav, it.getFile().getName());
    }
    dep.getChildren().each { addDependency(gavMap, it) }
}

def bundleClassPath() {
    def gavMap = [:]
    configurations.compile.getResolvedConfiguration().getFirstLevelModuleDependencies().each
            {
                addDependency(gavMap, it)
            }

    def list = ['.']
    gavMap.each { key, value ->
        list.add("${value};mvn:${key}")
    }
    println list.join(',')
    list
}


def includeResource() {
    def list = []
    configurations.testCompile.each {
        list += it.name
    }
    list.join(',')
}


task testJar(type: Jar) {
    from sourceSets.test.output
    classifier 'tests'

    applyPlugin(bundleJar)

    manifest {
        attributes 'Bundle-Name': "${project.getName()} Test",
                'Bundle-SymbolicName': 'org.talend.daikon.test',
                'Export-Package': 'org.talend.daikon.*',
                'Bundle-ClassPath': bundleClassPath(),
                'Include-Resource': includeResource(),
                'Dynamic-ImportPackage': '*',
                //'Conditional-Package': 'junit*|org.*',
                'Private-Package': 'junit*|org.*|com.*'
        // 'Service-Component': '*'
        //'Embed-Transitive': 'true',
        //  'Embed-Dependency': '*;scope=test;artifactId=!hamcrest-core|junit'
    }
}
jar.dependsOn bundleJar, testJar, javadocJar
